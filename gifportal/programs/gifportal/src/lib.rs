use anchor_lang::prelude::*;

// program id - initially generated by anchor init
// specifies how to load and execute the program
// contains info on how the Solana runtime should execute the program
// Solana uses it to reference all the accounts generated by the program
declare_id!("8SZ4NrW8xfKgrPEmLmsnvzhK6Fd9xDnBHFyadvosMkff");

#[program]
// a Rust module (collection of functions and variables)
pub mod gifportal {
  use super::*;
  // function that takes a Context and outputs a Result
  pub fn start_stuff_off(ctx: Context<StartStuffOff>) -> Result <()> {
    // get a reference to base_account
    let base_account = &mut ctx.accounts.base_account;
    // initialise total_gifs
    base_account.total_gifs = 0;
    // Ok is a Result type
    Ok(())
  }

  // get a reference to the account and increment total_gifs
  pub fn add_gif(ctx: Context<AddGif>, gif_link: String) -> Result <()> {
    let base_account = &mut ctx.accounts.base_account;
    let user = &mut ctx.accounts.user;

    // build a struct
    let item = ItemStruct {
      gif_link: gif_link.to_string(),
      user_address: *user.to_account_info().key,
    };

    // add it to the gif_list vector
    base_account.gif_list.push(item);
    base_account.total_gifs += 1;
    Ok(())
  }
}

// macro to specify different account constraints
#[derive(Accounts)]
pub struct StartStuffOff<'info> {
  // init = tells Solana to create a new account owned by our current program
  // payer = who's paying for the account to be created (the user calling the function)
  // space = allocates X bytes of space for our account
  #[account(init, payer = user, space = 9000)]
  pub base_account: Account<'info, BaseAccount>,
  #[account(mut)]
  // passed into the program to prove to the program that the user calling
  // this program acually owns their wallet account
  pub user: Signer<'info>,
  // reference to the SystemProgram - the program that basically runs Solana
  // a program the creators of Solana deployed that other programs talk to
  pub system_program: Program <'info, System>,
}

#[derive(Accounts)]
// create a Context named AddGif
// that has access to a mutable reference to base_account
pub struct AddGif<'info> {
  #[account(mut)]
  pub base_account: Account<'info, BaseAccount>,
  #[account(mut)]
  pub user: Signer<'info>,
}

// custom struct which will be serialised into binary
#[derive(Debug, Clone, AnchorSerialize, AnchorDeserialize)]
pub struct ItemStruct {
  pub gif_link: String,
  pub user_address: Pubkey,
}

// tells the program what kind of account it can make and
// what to hold inside of it
#[account]
pub struct BaseAccount {
  // declare an integer named total_gifs
  pub total_gifs: u64,
	// a Vector (~ an array) of type ItemStruct
  pub gif_list: Vec<ItemStruct>,
}
